"vim: foldmethod=marker: foldmarker={{{,}}}
"        _
" __   _(_)_ __ ___  _ __ ___
" \ \ / / | '_ ` _ \| '__/ __|
"  \ V /| | | | | | | | | (__
"   \_/ |_|_| |_| |_|_|  \___|

" set neovim plugins as same dir
if has('nvim')
    " Load Plugins
    set rtp+=~/.vim
endif

" Basic Settings {{{
" ==============

" Welcome to modern world
set nocompatible

" Set leader key
let mapleader=","

" set encoding as utf-8
set encoding=utf-8

" Modelines
set modelines=2
set modeline

" For clever completion with :find command
set path+=**

" Search
set ignorecase smartcase
set grepprg=ag
set nohlsearch

" Set numbering
set number relativenumber

" Splits
set splitbelow splitbelow

" Buffers 
set history=500
set hidden

if exists("&undofile")
    set undofile
endif

" Spelling
set dictionary+=/usr/share/dict/words thesaurus+=$HOME/.thesaurus

" Text display
set listchars=trail:.,tab:>-,extends:>,precedes:<,nbsp:Â¬
set list

" Typing behaviour
set backspace=indent,eol,start
set showmatch
set wildmode=full
set wildmenu
set complete-=i

" Formating
set wrap
set ts=4 sw=4 sts=4
set expandtab
set foldlevelstart=2

syntax enable

" Colorscheme
color molokai
set background=dark

set secure

" }}}

" Backups {{{
" =======

set directory=~/.backups/swaps//
set backupdir=~/.backups/backups//
if exists("&undodir")
    set undodir=~/.backups/undofiles//
endif

" }}}

" Use vim-plug for managing plugins {{{

" Automatic installation of vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

call plug#begin('$HOME/.vim/plugged')

" Syntanx Highlighting {{{
" ====================

Plug 'hdima/python-syntax'   " Python syntax highlighting 
Plug 'gko/vim-coloresque'   " set the background of color values to the color 
Plug 'PotatoesMaster/i3-vim-syntax'   " i3 syntax highlighting for vim 

" }}}

" Code compilation/checking {{{
" =========================

Plug 'SirVer/ultisnips'   " ultimate solution for snippets 
Plug 'honza/vim-snippets'   " contains snippetsfiles for various programming languages 
Plug 'w0rp/ale'   " Asynchronous linting/fixing for Vim and Language Server Protocol (LSP) integration  

" Code completion using deoplete
if has('nvim')
    Plug 'Shougo/deoplete.nvim', {'do': ':UpdateRemotePlugins'}
else
    Plug 'Shougo/deoplete.nvim'
    Plug 'roxma/nvim-yarp'
    Plug 'roxma/vim-hug-neovim-rpc'
endif 

Plug 'zchee/deoplete-clang'   " C/C++/Objective-C/Objective-C++ source for deoplete.nvim 
Plug 'davidhalter/jedi-vim'   " autocompletion library for python 

"}}}

" File Manager {{{
" ============

" fuzzy file finder and so much more
Plug 'junegunn/fzf', { 'dir': '~/.vim/plugged/.fzf', 'do': './install --bin' }
Plug 'junegunn/fzf.vim'

"}}}

" Miscelaneous {{{
" ============

Plug 'junegunn/vim-easy-align'   " align text along some common character 
Plug 'terryma/vim-multiple-cursors'   " awesome multiple selection feature 
Plug 'godlygeek/tabular'   " text filtering and alignment 
Plug 'dhruvasagar/vim-table-mode'   " Table Mode for instant table creation 
Plug 'moll/vim-bbye'   " Delete buffers and close files in Vim without closing your windows or messing up your layout 
Plug 'alpertuna/vim-header'   " Easily adds brief author info and license headers 
Plug 'jiangmiao/auto-pairs'   " auto pairs 

"}}}

" His Home-Row-ness the Pope of Tim {{{
" ==================================

Plug 'tpope/vim-surround'   " surroundings: parentheses, brackets, quotes, XML tags, and more 
Plug 'tpope/vim-commentary'   " Comment stuff out 
Plug 'tpope/vim-repeat'   " remaps . in a way that plugins can tap into it. 
Plug 'tpope/vim-eunuch' " Vim sugar for the UNIX shell commands

"}}}

" Theme {{{
" =====

Plug 'tomasr/molokai'   " Molokai color scheme 
Plug 'vim-airline/vim-airline'   " Lean & mean status/tabline 
Plug 'vim-airline/vim-airline-themes'   " Airline themes 

" }}}


" Initialize plugin system
call plug#end()

filetype plugin indent on

"}}}

" Plugin configuration {{{

" netrw: Configuration {{{
" ==================== 

let g:netrw_banner=0        " disable banner
let g:netrw_browse_split=4  " open in prior window
let g:netrw_altv=1          " open splits to the right
let g:netrw_liststyle=3     " tree view
" hide gitignore'd files
let g:netrw_list_hide=netrw_gitignore#Hide()
" hide dotfiles by default (this is the string toggled by netrw-gh)
let g:netrw_list_hide.=',\(^\|\s\s\)\zs\.\S\+'

" }}}

" Auto Pair {{{
" =========

let g:AutoPairs = {'(':')', '[':']', '{':'}',"'":"'",'"':'"', '`':'`'}

" }}}

" Deoplete {{{
" ========

let g:deoplete#enable_at_startup = 1

" }}}

" Deoplete-Clang {{{
" ==============

let g:deoplete#sources#clang#libclang_path = '/usr/lib/libclang.so'
let g:deoplete#sources#clang#clang_header = '/usr/lib/clang'

" }}}

" Vim-Headers {{{
" ===========

let g:header_field_author = 'Samyak Puri'
let g:header_field_author_email = 'samyakpuri@hotmail.com' 
let g:header_auto_add_header = 0

" }}}

" Vim Table Mode {{{
" ==============

function! s:isAtStartOfLine(mapping)
  let text_before_cursor = getline('.')[0 : col('.')-1]
  let mapping_pattern = '\V' . escape(a:mapping, '\')
  let comment_pattern = '\V' . escape(substitute(&l:commentstring, '%s.*$', '', ''), '\')
  return (text_before_cursor =~? '^' . ('\v(' . comment_pattern . '\v)?') . '\s*\v' . mapping_pattern . '\v$')
endfunction

inoreabbrev <expr> <bar><bar>
          \ <SID>isAtStartOfLine('\|\|') ?
          \ '<c-o>:TableModeEnable<cr><bar><space><bar><left><left>' : '<bar><bar>'
inoreabbrev <expr> __
          \ <SID>isAtStartOfLine('__') ?
          \ '<c-o>:silent! TableModeDisable<cr>' : '__'

" }}}

" Ultisnips {{{
" =========

let g:UltiSnipsExpandTrigger = "<C-Space>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

" }}}

"}}}

" Auto commands {{{

" Clear auto commands
au!

" Make the modification indicator [+] white on red background
au ColorScheme * hi User1 gui=bold term=bold cterm=bold guifg=white guibg=red ctermfg=white ctermbg=red

" Tweak the color of the fold display column
au ColorScheme * hi FoldColumn cterm=bold ctermbg=233 ctermfg=146

" Spaces only
au FileType markdown,cpp,hpp,vim,sh,html,css,scss,javascript,python setl expandtab list

" Tabs Only
au FileType c,h,make setl foldmethod=syntax noexpandtab listchars=trail:.
au FileType gitconfig,sql setl noexpandtab listchars=trail:.

" Folding
au FileType html,htmldjango,css,sass,javascript,coffee,python,ruby,eruby setl foldmethod=indent foldenable
au FileType json setl foldmethod=indent foldenable shiftwidth=4 softtabstop=4 tabstop=4 expandtab

" Tabstop/Shiftwidth
au FileType mustache,ruby,eruby,javascript,coffee,sass,scss setl softtabstop=2 shiftwidth=2 tabstop=2

" Other
au FileType python let b:python_highlight_all=1
au FileType markdown setl linebreak

" }}}

" Key Mappings {{{

" Easy quickfix navigation
nnoremap <C-n> :cn<CR>
nnoremap <C-p> :cp<CR>

" Shortcutting split navigation, saving a keypress:
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Newlines
nnoremap <C-j> o<ESC>k
nnoremap <C-k> O<ESC>j

" Easy header/source swap
nnoremap [f :call SourceHeaderSwap()<CR>

" Usual ^^ behavior re-adds to the buffer list; this leaves it hidden
nnoremap <C-^> :b#<CR>

" Yank all top-level Python methods into register m
nnoremap ,m let @m="" \| g/def /exe "normal 0f l\"Myt(" \| let @m.=","

" Select the stuff I just pasted
nnoremap gV `[V`]

" Easy saving
inoremap <C-u> <ESC>:w<CR>

" Copy selected text to system clipboard (requires gvim installed):
vnoremap <C-c> "*Y :let @+=@*<CR>
map <C-p> "+P

" Sane pasting
command! Paste call SmartPaste()

" De-fuckify whitespace
nnoremap <F4> :retab<CR>:%s/\s\+$//e<CR><C-o>

" De-fuckify syntax hilighting
nnoremap <F3> :syn sync fromstart<CR>

" Editing vimrc
nnoremap ,v :source $MYVIMRC<CR>
nnoremap ,e :edit $MYVIMRC<CR>

" Quickly change search hilighting
nnoremap <silent> ; :set invhlsearch<CR>

" Change indent continuously
vmap < <gv
vmap > >gv

" Tabs
if exists( '*tabpagenr' ) && tabpagenr('$') != 1
    nnoremap ,V :tabdo source $MYVIMRC<CR>
else
    nnoremap ,V :bufdo source $MYVIMRC<CR>
endif

" camelCase => camel_case
vnoremap ,case :s/\v\C(([a-z]+)([A-Z]))/\2_\l\3/g<CR>

" Clean up Sass source
vnoremap ,S :call CleanupSassSource()<CR>

" Movement between tabs OR buffers
nnoremap <silent> L :call MyNext()<CR>
nnoremap <silent> H :call MyPrev()<CR>

" Resizing split windows
nnoremap ,w :call SwapSplitResizeShortcuts()<CR>

" Swap tab/space mode
nnoremap ,<TAB> :set et! list!<CR>

" Insert timestamp
nnoremap <C-d> "=strftime("%-l:%M%p")<CR>P
inoremap <C-d> <C-r>=strftime("%-l:%M%p")<CR>

" set Terminal exit to esc
if has('nvim')
    tnoremap <ESC> <C-\><C-n>
endif

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" fzf
" inoremap <leader>o <ESC>:Files<CR>
nnoremap <leader>o <ESC>:Files<CR>
" inoremap <leader>b <ESC>:Buffers<CR>
nnoremap <leader>b <ESC>:Buffers<CR>

" Force saving files that require root permission 
cnoremap w!! w !sudo tee > /dev/null 

"}}}

" Vim functions {{{

" CleanupSassSource() {{{

function! CleanupSassSource()
  " All comma delimiters should have a following space
  silent '<,'>s/,\([^\s]\)/, \1/ge
  " All comma delimiters should have 1 and only 1 space
  silent '<,'>s/,\s\{2,\}/, /ge
endfunction

" }}}

" Source/Header Swap {{{
function! SourceHeaderSwap()
    if expand('%:h') == 'content/ui'
        execute ":edit mods/base/ui/".expand('%:t:r').".py"
    elseif expand('%:h') == 'mods/base/ui'
        execute ":edit content/ui/".expand('%:t:r').".html"
    elseif expand('%:e') == 'h'
        if filereadable(expand('%:r').".cpp")
            execute ":edit ".expand('%:r').".cpp"
        else
            execute ":edit ".expand('%:r').".c"
        endif
    else
        edit %<.h
    endif
endfunction
" }}}

" {{{ Sane Pasting

function! SmartPaste()
    setl paste
    normal "+p
    setl nopaste
endfunction

" }}}



" }}}


